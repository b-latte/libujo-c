node ('LINUX-SLAVE') {
    def linux64 = docker.build("linux64", "dockerlinux64")
	def linux32 = docker.build("linux32", "dockerlinux32")

	stage ('build64'){
		linux64.inside {
			checkout scm
			sh '''mkdir build
			cd build
			cmake .. -G "Unix Makefiles" -DUJO_TARGET_PLATFORM=linux_x86-64
			cmake --build . --clean-first'''
		}
	}
	try {
		stage ('splint-check64') {
			linux64.inside {
				sh "splint +posixlib -boolops -predboolint -nullret -macrounrecog -varuse -temptrans +matchanyintegral -retvalother -predboolothers -retvalint +longunsignedintegral -mustfreeonly -compdef -dependenttrans -branchstate -usedef  -nullstate -mustfreefresh -onlytrans -usereleased -mayaliasunique -bufferoverflowhigh -nullderef -duplicatequals -nullpass -exportlocal -DENV64BIT -DLINUX -DWRITE_DEBUG_LOG -Dujo11_64_EXPORTS -I/usr/include/x86_64-linux-gnu -I$WORKSPACE/src/ -I$WORKSPACE/test/tests/ -I$WORKSPACE/test/ $WORKSPACE/src/*.c $WORKSPACE/test/*.c $WORKSPACE/test/tests/*.c"
			}
		}
	}catch(e) {
		echo "Failed: ${e}"
	}
	finally {       
		stage ('testujo64') {
			sh '''cd $WORKSPACE/build/linux_x86-64/test
			./testujo64'''
		}
    }
			
	try {
		stage ('flawfinder64') {
			linux64.inside {
				sh "flawfinder $WORKSPACE"
			}
		}
	}catch(e) {
		echo "Failed: ${e}"
	} 
							
	stage ('build32'){
		linux32.inside {
			checkout scm
			 sh '''mkdir build
			cd build
			cmake .. -G "Unix Makefiles" -DUJO_TARGET_PLATFORM=linux_x86-32
			cmake --build . --clean-first'''
		}
	}
	try {
		stage ('splint-check32') {
			linux32.inside {
				sh "splint +posixlib -boolops -predboolint -nullret -macrounrecog -varuse -temptrans +matchanyintegral -retvalother -predboolothers -retvalint +longunsignedintegral -mustfreeonly -compdef -dependenttrans -branchstate -usedef  -nullstate -mustfreefresh -onlytrans -usereleased -mayaliasunique -bufferoverflowhigh -nullderef -duplicatequals -nullpass -exportlocal -DENV64BIT -DLINUX -DWRITE_DEBUG_LOG -Dujo11_32_EXPORTS -I/usr/include//i386-linux-gnu -I$WORKSPACE/src/ -I$WORKSPACE/test/tests/ -I$WORKSPACE/test/ $WORKSPACE/src/*.c $WORKSPACE/test/*.c $WORKSPACE/test/tests/*.c"
			}
		}
	}catch(e) {
		echo "Failed: ${e}"
	}
			
	try {
		stage ('flawfinder32') {
			linux32.inside {
				sh "flawfinder $WORKSPACE"
			}
		}
	}catch(e) {
		echo "Failed: ${e}"
	} 		
	finally {       
		stage ('testujo32') {
			sh '''cd $WORKSPACE/build/linux_x86-32/test
			./testujo'''
		}
    }
}